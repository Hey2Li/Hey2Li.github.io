<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android学习笔记（二） 按钮控件Button</title>
    <link href="/2023/04/14/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/04/14/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="按钮控件Button"><a href="#按钮控件Button" class="headerlink" title="按钮控件Button"></a>按钮控件Button</h2><blockquote><p>本节学习Android中按钮的常见用法</p></blockquote><p>除了文本视图以外，Button也是一种基础控件。Button是由TextView派生而来，所以它可以使用文本视图的属性和方法。不同的是Button拥有默认的按钮背景，而TextView无背景；Button的内部文本默认居中对齐，而TextView的内部文本默认左对齐。此外还要需要额外注意textAllCaps与onClick两个属性，分别介绍如下:</p><h3 id="1-textAllCaps属性"><a href="#1-textAllCaps属性" class="headerlink" title="1. textAllCaps属性"></a>1. textAllCaps属性</h3><p>对于TextView来说，设置什么就显示什么，但是对于Button来说不管设置大写还是小写字符控件都真是转成大写展示。因为给Button标签补充textAllCaps属性，该属性默认为true表示全部转为大写，设置为false表示不展示大写。</p><p>代码示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World&quot;</span> <span class="hljs-attr">android:textAllCaps</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414143212597.png" alt="image-20230414143212597"></p><h3 id="2-onClick属性"><a href="#2-onClick属性" class="headerlink" title="2.  onClick属性"></a>2.  onClick属性</h3><p> onClick对于前端开发应该都不陌生，在Android中该属性的值是个方法名，也就是当前页面Java代码存在的一个方法：当用户点击按钮时，就自动调用该方法。</p><p>譬如下面的Button标签指定了onClick属性值为doClick,表示点击该按钮后会出发Java代码中的doClick方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_click_xml&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;doClick&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;直接指定点击方法&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_result&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;这里查看按钮的点击结果&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>与之对应的页面中的Java中需要增加doClick方法，方法部分代码示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// activity_button_style.xml中给btn_click_xml指定了点击方法doClick </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doClick</span><span class="hljs-params">(View view)</span> &#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s 您点击了按钮：%s&quot;</span>, DateUtil.getNowTime(), ((Button) view).getText()); <br>  tv_result.setText(desc); <br>  <span class="hljs-comment">// 设置文本视图的文本内容 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>点击之前：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414145304173.png" alt="image-20230414145304173"></p><p>点击之后：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414145324222.png" alt="image-20230414145324222"></p><h3 id="3-点击事件和长按事件"><a href="#3-点击事件和长按事件" class="headerlink" title="3 点击事件和长按事件"></a>3 点击事件和长按事件</h3><p>​        虽然按钮控件能够在XML文件中通过onClick属性指定点击方法，但是方法的名称可以随便叫，既能叫doClick也能叫doTouch，甚至叫它doA或doB都没问题，这样很不利于规范化代码，倘若以后换了别人接手，就不晓得doA或doB是干什么用的。因此在实际开发中，不推荐使用Button标签的onClick属性，而是在代码中给按钮对象注册点击监听器。</p><p>​        所谓监听器，意思是专门监听控件的动作行为，它平时无所事事，只有控件发生了指定的动作，监听器才会触发开关去执行对应的代码逻辑。点击监听器需要实现接口View.OnClickListener，并重写onClick方法补充点击事件的处理代码，再由按钮调用setOnClickListener方法设置监听器对象。下面的代码就是给控件btn_click_single设置的监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Button</span> <span class="hljs-variable">btn_click_single</span> <span class="hljs-operator">=</span> findViewById(R.id.btn_click_single);<br>btn_click_single.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyOnClickListener</span>);<br></code></pre></td></tr></table></figure><p>上面的点击监听器名为MyOnClickListener，它的定义代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyOnClickListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListenter &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s 您点击了按钮：%s&quot;</span>， DateUtil.getNowTime(),((Button)v).getText());<br>    tv_result.setText(desc);<span class="hljs-comment">//设置文本视图文本内容</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后点击按钮效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414150527483.png" alt="image-20230414150527483"></p><p>​        如果一个页面只有一个按钮，单独定义新的监听器倒也无妨，可是如果存在许多按钮，每个按钮都定义自己的监听器，那就劳民伤财了。对于同时监听多个按钮的情况，更好的办法是注册统一的监听器，也就是让当前页面实现接口View.OnClickListener，如此一来，onClick方法便写在了页面代码之内。因为是统一的监听器，所以onClick内部需要判断是哪个按钮被点击了，也就是利用视图对象的getId方法检查控件编号，完整的onClick代码举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123; <span class="hljs-comment">// 点击事件的处理方法</span><br>  <span class="hljs-keyword">if</span> (v.getId() == R.id.btn_click_public) &#123; <br>    <span class="hljs-comment">// 来自于按钮btn_click_public </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s 您点击了按钮：%s&quot;</span>, DateUtil.getNowTime(), ((Button) v).getText()); <br>    tv_result.setText(desc); <span class="hljs-comment">// 设置文本视图的文本内容 </span><br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>当然该页面的onCreate内部别忘了调用按钮对象的setOnClickListener方法，把按钮的点击监听器设置成当前页面，设置代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从布局文件中获取名为btn_click_public的按钮控件 </span><br><span class="hljs-type">Button</span> <span class="hljs-variable">btn_click_public</span> <span class="hljs-operator">=</span> findViewById(R.id.btn_click_public); <br><span class="hljs-comment">// 设置点击监听器，一旦用户点击按钮，就触发监听器的onClick方法 </span><br>btn_click_public.setOnClickListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><p>重新运行App后，点击第二个按钮发现onClick方法也可以正常执行了：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414161238060.png" alt="image-20230414161238060"></p><p>除了点击事件，Button还提供长按事件，当控件被按住超过500毫秒即可触发长按事件。监听长按事件，可以使用setOnLongClickListener监听器。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从布局文件中获取名为btn_click_public的按钮控件 </span><br><span class="hljs-type">Button</span> <span class="hljs-variable">btn_longclick_public</span> <span class="hljs-operator">=</span> findViewById(R.id.btn_longclick_public); <br><span class="hljs-comment">// 设置长按监听器，一旦用户长按按钮，就触发监听器的onLongClick方法 </span><br>btn_longclick_public.setOnLongClickListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><p>以上代码把长按监听器设置到当前页面，现在还需要实现对应的长按接口，并重写长按方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onLongClick</span><span class="hljs-params">(View v)</span> &#123;<br><span class="hljs-comment">// 长按事件的处理方法 </span><br><span class="hljs-keyword">if</span> (v.getId() == R.id.btn_longclick_public) &#123; <span class="hljs-comment">// 来自于按钮 btn_longclick_public</span><br><br>  <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s 您长按了按钮：%s&quot;</span>, DateUtil.getNowTime(), ((Button) v).getText()); <br>  tv_result.setText(desc); <span class="hljs-comment">// 设置文本视图的文本内容 </span><br>&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行，效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414161831245.png" alt="image-20230414161831245"></p><p>值得注意的是，点击监听器和长按监听器不局限于按钮控件，其实它们都来源于视图基类View，凡是从View派生而来的各类控件，均可注册点击监听器和长按监听器。譬如文本视图TextView，其对象也能调用setOnClickListener方法与setOnLongClickListener方法，此时TextView控件就会响应点击动作和长按动作。因为按钮存在按下和松开两种背景，便于提示用户该控件允许点击，但文本视图默认没有按压背景，不方便判断是否被点击，所以一般不会让文本视图处理点击事件和长按事件。</p><h3 id="4-禁用和恢复按钮"><a href="#4-禁用和恢复按钮" class="headerlink" title="4 禁用和恢复按钮"></a>4 禁用和恢复按钮</h3><p>​        Button可以存在静止点击的状态，需要设置属性<code>android:enabled</code>为true可以点击反之不可点击。在Java代码中可以通过setEnabled设置按钮的可用状态。</p><p>​        接下来通过一段代码演示按钮的禁用和启用状态。通过两个button来控制测试按钮的状态。代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_enable&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;启用测试按钮&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_disable&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;禁用测试按钮&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_test&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;测试按钮&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#888888&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_result&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;5dp&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;这里查看测试按钮的点击结果&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414162650933.png" alt="image-20230414162650933"></p><p>在Java代码中给三个按钮注册监听器，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 因为按钮控件的setOnClickListener方法来源于View基类，所以也可对findViewById得到的视图直 接设置点击监听器 </span><br>findViewById(R.id.btn_enable).setOnClickListener(<span class="hljs-built_in">this</span>); findViewById(R.id.btn_disable).setOnClickListener(<span class="hljs-built_in">this</span>); <br>btn_test = findViewById(R.id.btn_test); <span class="hljs-comment">// 获取名叫btn_test的按钮控件 </span><br>btn_test.setOnClickListener(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 设置btn_test的点击监听器</span><br></code></pre></td></tr></table></figure><p>同时重写页面的onClick方法，分别处理3个按钮的点击事件，修改之后的onClick代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123; <br>  <span class="hljs-comment">// 点击事件的处理方法 </span><br>  <span class="hljs-comment">// 由于多个控件都把点击监听器设置到了当前页面，因此公共的onClick方法内部需要区分来自于哪个 按钮 </span><br>  <span class="hljs-keyword">if</span> (v.getId() == R.id.btn_enable) &#123; <span class="hljs-comment">// 点击了按钮“启用测试按钮” </span><br>    btn_test.setTextColor(Color.BLACK); <span class="hljs-comment">// 设置按钮的文字颜色 </span><br>    btn_test.setEnabled(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 启用当前控件 </span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v.getId() == R.id.btn_disable) &#123; <span class="hljs-comment">// 点击了按钮“禁用测试按钮” </span><br>    btn_test.setTextColor(Color.GRAY); <span class="hljs-comment">// 设置按钮的文字颜色 </span><br>    btn_test.setEnabled(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 禁用当前控件</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v.getId() == R.id.btn_test) &#123; <span class="hljs-comment">// 点击了按钮“测试按钮” </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s 您点击了按钮：%s&quot;</span>, DateUtil.getNowTime(), ((Button) v).getText()); <br>    tv_result.setText(desc); <span class="hljs-comment">// 设置文本视图的文本内容 </span><br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>最后编译运行App，点击了“启用测试按钮”之后，原本置灰的测试按钮btn_test恢复正常的黑色文本，点击该按钮发现界面有了反应，具体效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414162935262.png" alt="image-20230414162935262"></p><p>对比上面两图，可以观察禁用和启用两个模式的区别。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android学习笔记（一）Android中的常用布局</title>
    <link href="/2023/04/14/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Android%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/"/>
    <url>/2023/04/14/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Android%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Android中的常用布局"><a href="#Android中的常用布局" class="headerlink" title="Android中的常用布局"></a>Android中的常用布局</h1><h2 id="1线性布局-LinearLayout"><a href="#1线性布局-LinearLayout" class="headerlink" title="1线性布局 LinearLayout"></a>1线性布局 LinearLayout</h2><p>​        线性布局是Android的基本布局，可以水平排列<code>horizontal</code>和垂直排列<code>vertical</code>通过<code>android:orientation</code>来设置方向，系统默认布局为水平方向排列，这跟iOS中的<code>VStack</code>,<code>HStack</code>有些相似。<br>​        除了方向之外，线性布局还有一个权重概念，所谓权重就是指布局的子视图各自拥有多大的比例的宽高。占比多或是占比少通过属性<code>android:layout_weight</code>来设置。。不过视图有宽高两个方向，系统怎知layout_weight表示哪个方向的权重呢？所以这里有个规定，一旦设置了layout_weight属性值，便要求layout_width填0dp或者layout_height填0dp。如果layout_width填0dp，则layout_weight表示水平方向的权重，下级视图会从左往右分割线性布局；如果layout_height填0dp，则layout_weight表示垂直方向的权重，下级视图会从上往下分割线性布局。</p><p>​        按照左右均分的话，线性布局设置水平方向horizontal，且甲乙两视图的layout_width都填0dp，layout_weight都填1，此时横排的XML片段示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;横排第一个&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;横排第二个&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        按照上下均分的话，线性布局设置垂直方向vertical，且甲乙两视图的layout_height都填0dp，</p><p>layout_weight都填1，此时竖排的XML片段示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;竖排第一个&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span> <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;竖排第二个&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体界面如图</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414105040856.png" alt="image-20230414105040856"></p><h2 id="2-相对布局RelativeLayout"><a href="#2-相对布局RelativeLayout" class="headerlink" title="2 相对布局RelativeLayout"></a>2 相对布局RelativeLayout</h2><p>线性布局的子视图是顺序排列的，相对布局的视图位置是有其他视图决定的，学过iOS肯定不陌生，毕竟iOS大部分的布局都是相对布局。如果不设定下级视图的参照物，默认就在RelativeLayout的左上角。</p><table><thead><tr><th>相对位置的属性取值</th><th>相对位置说明</th></tr></thead><tbody><tr><td>layout_toLeftOf</td><td>当前视图在指定视图的左边</td></tr><tr><td>layout_toRrightOf</td><td>当前视图在指定视图的右边</td></tr><tr><td>layout_above</td><td>在指定视图的上方</td></tr><tr><td>layout_below</td><td>在指定视图的下方</td></tr><tr><td>layout_alignLeft</td><td>当前视图与指定视图左对齐</td></tr><tr><td>layout_alignRight</td><td>当前视图与指定视图右对齐</td></tr><tr><td>layout_alignTop</td><td>当前视图与指定视图顶对齐</td></tr><tr><td>layout_alignBottom</td><td>当前视图与指定视图底对齐</td></tr><tr><td>layout_centerInParent</td><td>当前视图在上级视图中间</td></tr><tr><td>layout_centerHorizontal</td><td>当前视图在上级视图的水平方向居中</td></tr><tr><td>layout_centerVertical</td><td>当前视图与上级视图垂直方向居中</td></tr><tr><td>layout_alignParentLeft</td><td>当前视图与上级视图左对齐</td></tr><tr><td>layout_alignParentRight</td><td>当前视图与上级视图右对齐</td></tr><tr><td>layout_alignParentTop</td><td>当前视图与上级视图顶对齐</td></tr><tr><td>layout_alignParentBottom</td><td>当前试图与上级视图底部对齐</td></tr></tbody></table><p>需要记住的属性大概就这么多，对比<code>masonry</code>好像确实有点多，不过见文知意也不需要特别去记。</p><p>xml代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;150dp&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffffff&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在中间&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_center_horizontal&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_centerHorizontal</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在水平中间&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_center_vertical&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_centerVertical</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在垂直中间&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_parent_left&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_alignParentLeft</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我跟上级左边对齐&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_parent_right&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_alignParentRight</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我跟上级右边对齐&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_parent_top&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_alignParentTop</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我跟上级顶部对齐&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_parent_bottom&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我跟上级底部对齐&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_left_center&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_toLeftOf</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:layout_alignTop</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在中间左边&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_right_center&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_toRightOf</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:layout_alignBottom</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在中间右边&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_above_center&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_above</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:layout_alignLeft</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在中间上面&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_below_center&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_below</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:layout_alignRight</span>=<span class="hljs-string">&quot;@+id/tv_center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#eeeeee&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我在中间下面&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;11sp&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414112641418.png" alt="image-20230414112641418"></p><h2 id="3-网格布局"><a href="#3-网格布局" class="headerlink" title="3 网格布局"></a>3 网格布局</h2><p>​        虽然线性布局能在水平和垂直方向排列，但是它不支持多行多列的布局方式，所有要实现类似表格那样的多行多列形式，可以采用网格布局GridLayout。</p><p>​        网格布局默认从左往右，从上到下排列，它先从第一行从左往右放置子视图，塞满之后另起一行放置其余的子视图，如此循环往复直至放置完毕。为了判断能够容纳几行几列，网格视图新增以下属性<code>android:columnCount</code>与<code>android:rowCount</code>两个属性，<code>columnCount</code>指定列数，<code>rowCount</code>指定行数。</p><p>​        下面是网格布局的布局代码示例，它规定了一个两行两列的网格布局，且内部容纳四个文本视图。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根布局为两行两列的网格布局，其中列数由columnCount指定，行数由rowCount指定 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">GridLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:columnCount</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">android:rowCount</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;180dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;60dp&quot;</span> <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffcccc&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;浅红色&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;180dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;60dp&quot;</span> <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffaa00&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;橙色&quot;</span><span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;180dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;60dp&quot;</span> <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00ff00&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;绿色&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;180dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;60dp&quot;</span> <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#660066&quot;</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;深紫色&quot;</span> <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#000000&quot;</span> <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;17sp&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">GridLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/image-20230414132425562.png" alt="image-20230414132425562"></p><h2 id="4-滚动视图ScrollView"><a href="#4-滚动视图ScrollView" class="headerlink" title="4 滚动视图ScrollView"></a>4 滚动视图ScrollView</h2><p>滚动视图顾名思义就是可以滚动的视图，当内容超出手机展示界面时需滑动手机屏幕才能完整展示，但是一般的视图不支持自行滚动，这时就需要借助滚动视图。与线性布局类似，滚动视图也分为水平和垂直两类，其中垂直滚动视图为ScrollView，水平滚动视图为HorizontalScrollView，这与iOS倒是不同，iOS只有一个ScrollView，只是有个属性可以设置水平还是垂直。滚动视图使用不用复杂，主要注意一下3点：</p><ul><li><p>垂直滚动时，layout_width属性设置为match_parent,layout_height设置为wrap_content。</p></li><li><p>水平滚动时，layout_width属性设置为wrap_content,layout_height设置为match_parent.</p></li><li><p>滚动视图节点下必须且只能挂着一个子布局节点，否则会在运行时报错<code>Caused by： java.lang.IllegalStateException：ScrollView can host only one direct child</code>。</p></li></ul><p>下面是垂直滚动视图ScrollView和水平滚动HorizontalScrollView的代码示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!-- HorizontalScrollView是水平方向的滚动视图，当前高度为200dp --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">HorizontalScrollView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;200dp&quot;</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 水平方向的线性布局，两个子视图的颜色分别为青色和黄色 --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#aaffff&quot;</span> /&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffff00&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">HorizontalScrollView</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!-- ScrollView是垂直方向的滚动视图，当前高度为自适应 --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!-- 垂直方向的线性布局，两个子视图的颜色分别为绿色和橙色 --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span> <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;400dp&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00ff00&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;400dp&quot;</span> <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffffaa&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行测试App，可知ScrollView在纵向滚动，而HorizontalScrollView在横向滚动。</p><p><em><strong>注意</strong></em>：有时ScrollView的实际内容不够充满整个屏幕，但是又想让它充满屏幕，如果把layout_height属性设为match_parent，结果还是不能充满，正确的做法是再增加一行属性<code>android:fillViewport</code>该属性为true表示允许充满视图窗口，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:layout_height=&quot;match_parent&quot; <br>android:fillViewport=&quot;true&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多个ssh秘钥导致Git push失败及其解决方案</title>
    <link href="/2023/04/13/%E5%A4%9A%E4%B8%AAssh%E7%A7%98%E9%92%A5%E5%AF%BC%E8%87%B4Git-push%E5%A4%B1%E8%B4%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/04/13/%E5%A4%9A%E4%B8%AAssh%E7%A7%98%E9%92%A5%E5%AF%BC%E8%87%B4Git-push%E5%A4%B1%E8%B4%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>自从上次更换Mac，导致Hexo文件丢失后居然已经N年没有写Blog，最近心血来潮打算重新开始拾起来，于是便新建了一个Hexo将以前的替换，重新开始，索性便将遇到的问题当做这个Blog的第一篇吧。</p><p><strong>解决方案请直接看最后，中间都是无用废话</strong></p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为向GitHub推送内容需要ssh秘钥，但是我本地已经有了gitlab的秘钥，我又不想替换于是便Google一下如何配置多个ssh秘钥，命令如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.别名 -C <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>比如要生成GitHub的ssh就可以这样：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.github -C <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>我看完命令后直接生成完秘钥就关闭网页，这就导致我后面的一系列踩坑，不过幸亏有ChatGPT让我的坑踩得容易多了， 当然这都是后话了。</p><p>然后我就继续搭建Blog，当本地预览没问题后，我<code>hexo d</code> 后终端开始报错：</p> <figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">git@github.com: Permission denied (publickey).<br>fatal: 无法读取远程仓库。<br><br>请确认您有正确的访问权限并且仓库存在。<br>FATAL &#123;<br>  <span class="hljs-attribute">err</span>: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/Users/lee/blog/node_modules/hexo-util/lib/spawn<span class="hljs-variable">.js</span>:51:21)<br>      at ChildProcess<span class="hljs-variable">.emit</span> (node:events:390:28)<br>      at Process<span class="hljs-variable">.ChildProcess</span><span class="hljs-variable">._handle</span><span class="hljs-variable">.onexit</span> (node:internal/child_process:290:12) &#123;<br>    code: 128<br>  &#125;<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo<span class="hljs-variable">.io</span>/docs/troubleshooting<span class="hljs-variable">.html</span><br></code></pre></td></tr></table></figure><p>继续使用<code>ssh -T git@github.com</code>发现并没有出现success，猜想可能是秘钥生成错误，但是检查一遍后发现并不是，继续使用<code>ssh -vT git@github.com</code>查看log，发现查找本地秘钥的时候并没有找到有别名的ssh秘钥，所以大概知道问题出在哪了。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>直接ChatGPT开问，它直接告诉我三条命令</p><ol><li>打开终端并运行以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure><ol><li>确保 ssh-agent 正在运行。如果输出显示了 “Agent pid” 和一个数字，则说明 ssh-agent 正在运行。如果没有输出，则说明 ssh-agent 没有启动，您需要重新运行上述命令。</li><li>将 SSH 私钥文件添加到 ssh-agent 中。运行以下命令：</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.github<br></code></pre></td></tr></table></figure><ol start="3"><li>复制您的 SSH 公钥。运行以下命令来复制您的公钥：</li></ol> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">pbcopy &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.github.pub<br></code></pre></td></tr></table></figure><p>确实解决了，但是重启iTerm后发现又不能push了，继续问<br><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/20230413183804.jpg"></p><p>AI直接让我改终端配置文件，然并无卵用，倒是陷入坑中跟ChatGPT聊天浪费不少时间。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最后直接转换话题，问ChatGPT如何在Mac中配置多个ssh秘钥，给出结论和我开始的操作一样，不一样的是新增了config文件，真相大白，原因即是配置配置多个秘钥让Git可以识别不同的。</p><p>具体的方法如下：</p><p>在 Mac 上配置多个 SSH 秘钥的步骤如下：</p><ol><li>生成多个密钥对</li></ol><p>在终端中执行以下命令生成多个密钥对：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@example.com&quot;</span> -f ~/.ssh/id_rsa_1<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@example.com&quot;</span> -f ~/.ssh/id_rsa_2<br></code></pre></td></tr></table></figure><p>其中 <code>-f</code> 参数指定了私钥和公钥的文件名，可以根据需要自定义。</p><ol><li>添加私钥到 SSH Agent</li></ol><p>执行以下命令将私钥添加到 SSH Agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add ~/.ssh/id_rsa_1<br>ssh-add ~/.ssh/id_rsa_2<br></code></pre></td></tr></table></figure><ol><li>配置 SSH 配置文件</li></ol><p>在 <code>~/.ssh/</code> 目录下创建 <code>config</code> 文件，并按照如下格式配置多个主机和对应的密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一个主机</span><br>Host host1<br>HostName example.com<br>User username<br>IdentityFile ~/.ssh/id_rsa_1<br><br><span class="hljs-comment"># 第二个主机</span><br>Host host2<br>HostName example.org<br>User username<br>IdentityFile ~/.ssh/id_rsa_2<br></code></pre></td></tr></table></figure><p>其中 <code>Host</code> 是主机别名，<code>HostName</code> 是主机名或 IP 地址，<code>User</code> 是登录用户名，<code>IdentityFile</code> 是对应的私钥文件路径。</p><ol><li>测试连接</li></ol><p>执行以下命令测试连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh host1<br>ssh host2<br></code></pre></td></tr></table></figure><p>如果连接成功，则表示配置成功。</p><p>这样就可以在 Mac 上使用多个 SSH 秘钥了。</p><p>经本人测试，重启终端后也可以正常使用。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>做完这一切后，我又找到那个只看了一半就关掉的如何配置多个秘钥的教程，发现后部分就是就是教你如何配置config的，真是被自己气死，看东西只看一半……</p><p>附上地址：<a href="https://blog.csdn.net/wxl1555/article/details/115682017">Mac如何生成并配置多个ssh秘钥_mac 创建多个ssh_牛长犇的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>fixs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上滑隐藏NvaigtionBar，下拉显示</title>
    <link href="/2016/08/11/%E4%B8%8A%E6%BB%91%E9%9A%90%E8%97%8FNvaigtionBar%EF%BC%8C%E4%B8%8B%E6%8B%89%E6%98%BE%E7%A4%BA/"/>
    <url>/2016/08/11/%E4%B8%8A%E6%BB%91%E9%9A%90%E8%97%8FNvaigtionBar%EF%BC%8C%E4%B8%8B%E6%8B%89%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>今天和产品沟通，要仿照一个APP，发现这个APP上滑时隐藏navigationBar,虽然也是隐藏但是效果和其他完全不一样，因为以前没见过也没做过，所以试着去实现一下，Google了一下，发现思路主要还是从KVO来下手。</p></blockquote><h2 id="原APP的效果"><a href="#原APP的效果" class="headerlink" title="原APP的效果"></a>原APP的效果</h2><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/strip" alt="2016-08-11 16_23_42.gif"></p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li><p>主要是给view中的滚动视图添加一个KVO来监视它的滑动，再根据它的offset来做一下操作，下面是代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">[myTableView addObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;contentOffset&quot;</span> options:<span class="hljs-built_in">NSKeyValueObservingOptionOld</span>|<span class="hljs-built_in">NSKeyValueObservingOptionNew</span> context:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure></li><li><p> 获取tableView的<code>contentOffset</code>之后再根据具体需求来实现逻辑判断</p></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)observeValueForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath ofObject:(<span class="hljs-type">id</span>)object change:(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSString</span> *,<span class="hljs-type">id</span>&gt; *)change context:(<span class="hljs-type">void</span> *)context &#123;<br>    <span class="hljs-keyword">if</span> ([object isEqual:myTableView] &amp;&amp; [keyPath isEqualToString:<span class="hljs-string">@&quot;contentOffset&quot;</span>]) &#123;<br>        <span class="hljs-comment">//获取新值旧值</span><br>        <span class="hljs-built_in">CGFloat</span> newY = [change[<span class="hljs-string">@&quot;new&quot;</span>] <span class="hljs-built_in">CGPointValue</span>].y;<br>        <span class="hljs-built_in">CGFloat</span> oldY = [change[<span class="hljs-string">@&quot;old&quot;</span>] <span class="hljs-built_in">CGPointValue</span>].y;<br>        <span class="hljs-type">float</span> i = newY - oldY;<span class="hljs-comment">//下拉是新值小于旧值的，所以i&lt;0 是下拉 i&gt;0 是上滑</span><br>         <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%f&quot;</span>,myTableView.contentOffset.y);<br>        <span class="hljs-keyword">if</span> (myTableView.contentOffset.y &gt; <span class="hljs-number">-64</span> &amp;&amp; myTableView.contentOffset.y &lt;= <span class="hljs-number">24</span>) &#123;<span class="hljs-comment">//边界条件，此处不精确</span><br>            <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0</span> &amp;&amp; _isHide == <span class="hljs-literal">NO</span> &amp;&amp; <span class="hljs-keyword">self</span>.navigationController.navigationBar.frame.origin.y == <span class="hljs-number">20</span>)&#123;<br>                <span class="hljs-comment">//下拉＋bar 已经显示的状态，不再移动</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            _isHide = <span class="hljs-literal">NO</span>;<br>            <span class="hljs-comment">//设置navigationbar 的frame 使他根据tableView来滑动</span><br>            <span class="hljs-keyword">self</span>.navigationController.navigationBar.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">-44</span> - myTableView.contentOffset.y, <span class="hljs-keyword">self</span>.view.bounds.size.width, <span class="hljs-number">44</span>);<br>            <span class="hljs-comment">//控制透明度</span><br>            <span class="hljs-keyword">self</span>.navigationController.navigationBar.alpha = -myTableView.contentOffset.y/<span class="hljs-number">64</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (myTableView.contentOffset.y &gt; <span class="hljs-number">24</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">10</span>) &#123;<span class="hljs-comment">//更改数值大小可以控制触发 navigation bar 的滑动速度</span><br>                _isHide = <span class="hljs-literal">YES</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">-10</span>) &#123;<br>                _isHide = <span class="hljs-literal">NO</span>;<br>            &#125;<br>        &#125;<br>        [<span class="hljs-keyword">self</span>.navigationController setNavigationBarHidden:_isHide animated:<span class="hljs-literal">YES</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完成效果图"><a href="#完成效果图" class="headerlink" title="完成效果图"></a>完成效果图</h2><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/strip.gif" alt="2016-08-11 15_55_00.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>实现起来确实没有什么难度，主要是因为以前没有做过，写这个主要是给大家看一下我的实现过程与思路，希望可以帮到大家。</p></li><li><p>我把源码上传到<a href="https://github.com/Hey2Li/HideNavi.git">GitHub</a>了，需要的可以看一下。</p></li><li><p>我的<a href="https://www.jianshu.com/p/6fbbe24bde67">简书</a>。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac下使用Hexo和GitHub搭建静态博客</title>
    <link href="/2016/07/13/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2016/07/13/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="更新-此为迁移文章"><a href="#更新-此为迁移文章" class="headerlink" title="更新: 此为迁移文章"></a>更新: 此为迁移文章</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><blockquote><p>最近看网上有用Hexo和GitHub的搭建博客的教程，自己也学着搭建了一个，过程分享一下</p></blockquote><p>#注册GitHub账号<br>因为博客是托管于<a href="www.github.com">GitHub</a>上，所以一个GitHub账户是必须的，注册的步骤就不介绍了，注册完以后选择免费服务即可。拥有一个GitHub账号以后，我们要新建一个仓库，点击首页右下角的<code>+ New repository</code>，就会出现如下界面：</p><p><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/1240" alt="QQ20160713-0@2x.png"><br>#安装Git<br>创建完仓库后，我们在电脑上安装Git，这样可以在本地建立项目并push到远程仓库上。</p><p>推荐使用Homebrew来安装Git。打开终端（Windows用户可以使用Git Bash等），输入以下指令安装Homebrew（Mac需要安装Xcode）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-variable">$</span>  ruby <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><br></code></pre></td></tr></table></figure><p>这样我们就安装好了Git。如果出现问题，尝试在指令前加入sudo，sudo可以获得root权限，执行带有sudo的指令电脑会要求你输入密码。</p><p>#安装Node.js<br>接下来就是安装Node.js了，我对Node.js了解不多，Hexo是基于Node.js的，所以Node.js的环境是不可或缺的。<br>直接去<a href="https://nodejs.org/en/">Node.js官网</a>下载安装就可以了。<br>有了Git和Node.js，Hexo就可以安装了，但是先别急，我们还有一些事情要干。</p><p>#配置SSH keys<br>打开GitHub，在头像旁边有个向下的箭头，点击选择选中setting，点击左边的SSH and GPG keys，添加一个SSH keys。SSH keys的好处是让我们以后在本地进行操作并同步到GitHub上时不用输密码，那么如何配置SSH keys<br>打开终端，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> \\~/. ssh</span><br></code></pre></td></tr></table></figure><p>这行代码能够帮助你检查电脑上现有的SSH key。<br>如果提示：<code>No such file or directory</code>说明没有key文件，输入以下代码生成新的key文件：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址@youremail.com&quot;</span><br></code></pre></td></tr></table></figure><p>这里的邮件地址填自己注册时的邮件地址，注意大小写，双引号不能省略，终端会返回代码让你确定文件名，回车就好。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.<br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/Users/</span>DoubleD<span class="hljs-regexp">/.ssh/i</span>d\\_rsa): <span class="hljs-comment">//回车就行</span><br></code></pre></td></tr></table></figure><p>接着会让你输入加密串，可以空着：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">$ Enter passphrase (empty for no passphrase):<span class="hljs-symbol">\\</span>&lt;输入加密串<span class="hljs-symbol">\\</span>&gt;<br>$ Enter same passphrase again:<span class="hljs-symbol">\\</span>&lt;再次输入加密串<span class="hljs-symbol">\\</span>&gt;<br></code></pre></td></tr></table></figure><p>看到如下所示的输出，就代表你已经成功的创建了一个SSH key。<br><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/1240-20230414164727388" alt="输出图"><br>找到本机上的id_rsa.pub文件,在终端输入：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-keyword">cd</span> <span class="hljs-string">.ssh</span><br>$ <span class="hljs-string">.ssh</span> open<br></code></pre></td></tr></table></figure><p>打开它（建议使用Sublime Text）复制里面的代码，记得不要多复制空格或换行，添加到下图位置：<br><img src="https://raw.githubusercontent.com/Hey2Li/blog.img/master/1240-20230414164807397" alt="QQ20160713-1@2x.png"><br>然后点击Add key就配置好了SSH key。输入下面的指令测试是否配置成功：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>如果返回的结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">he</span> authenticity of host &#x27;github.com (<span class="hljs-number">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class="hljs-attribute">RSA</span> key fingerprint is <span class="hljs-number">16</span>:<span class="hljs-number">27</span>:ac:a5:<span class="hljs-number">76</span>:<span class="hljs-number">28</span>:<span class="hljs-number">2</span>d:<span class="hljs-number">36</span>:<span class="hljs-number">63</span>:<span class="hljs-number">1</span>b:<span class="hljs-number">56</span>:<span class="hljs-number">4</span>d:eb:df:a6:<span class="hljs-number">48</span>.<br><span class="hljs-attribute">Are</span> you sure you want to continue connecting (yes/no)?<br></code></pre></td></tr></table></figure><p>输入yes，就能看到</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi YourID! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>这样你的SSH key就配置完成了。完成之后，我们设置好个人信息，用于提交代码说明是谁提交的，怎么联系。可以用以下指令完成：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的名字&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span>  <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>#安装Hexo<br>打开终端，输入以下指令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><p>在电脑上你愿意的一个位置建立一个文件夹，名字任意，然后在该目录下执行以下指令（在终端中输入cd+空格+文件路径就可在该目录下执行指令）：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install<br></code></pre></td></tr></table></figure><p>Hexo就会在该文件夹建立博客所需要的所有文件。本地的Hexo博客已经初步搭建起来，输入以下指令：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><span class="hljs-comment">//可以简写为 hexo g</span><br>$ hexo server<span class="hljs-comment">//可以简写为 hexo s</span><br></code></pre></td></tr></table></figure><p>就可以在浏览器中输入<a href="http://localhost:4000/">localhost:4000</a>查看本地博客了。要注意的是，所有的hexo指令都必须在你所建立的目录下执行。<br>#部署Hexo到GitHub上<br>本地的博客已经搭建好了，如何能让别人从网上访问到你的博客？只要将你的本地博客deploy到GitHub上就好。输入以下指令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后打开博客目录的_config.yml文件，设置deploy的type为git，repository(repo)<br>为 <code>https://github.com/你的id/你的id.github.io.git</code> （<strong>需要在type和repo后面加上一个空格再填写，一定要注意加空格，我就是在这里没加空格导致后面命令一直失败</strong>）。最后在你的Hexo目录中找到source文件夹，在其中新建一个文件CNAME，没有后缀名（建议使用Sublime Text新建），内容为你的域名（即ＸXXXXX．XXXXXX，不要加ＷＷＷ之类的前缀），保存。输入以下指令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> hexo g<br><span class="hljs-symbol">$</span> hexo deploy<span class="hljs-comment">//可简写为 hexo d</span><br></code></pre></td></tr></table></figure><p>在浏览器中输入你自己的域名就可以访问你自己的博客啦！<br>#更改主题<br>这里是我使用的一个主题，包括使用方法上面已经介绍的很详细了 <a href="http://theme-next.iissnan.com/getting-started.html">NexT</a><br>#最后<br>建好的博客是可以绑定其他域名的，我这里并没有的做，有兴趣的朋友可以看我下面的参考文章上面有如何申请域名以及绑定域名。</p><p>最后附上我刚刚才搭好的博客，很简陋上面都没有，让大家见笑了 <a href="https://hey2li.github.io/">旧</a><br>#参考文章<br>【1】<a href="https://hexo.io/zh-cn/docs/writing.html">hexo文档</a><br>【2】<a href="https://jmingzi.github.io/2015/12/04/github-hexo%E5%86%99%E6%96%87%E7%AB%A0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%AD%89%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/">github+hexo写文章上传图片等常用操作记录</a><br>【3】<a href="https://hexo.io/themes/">hexo主题</a><br>【4】<a href="https://xuanwo.org/2015/03/26/hexo-intor/">史上最详细的Hexo博客搭建图文教程</a><br>【5】<a href="http://www.jianshu.com/p/23760f7970f7">使用Hexo搭建自己的博客</a><br>【6】<a href="http://www.cnblogs.com/zhcncn/p/4097881.html">Hexo搭建Github静态博客</a><br>【7】<a href="http://yebujimo.com/2015/03/15/Mac%E4%B8%8B%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/">Mac下搭建Hexo博客教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1970/01/01/hello-world/"/>
    <url>/1970/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
